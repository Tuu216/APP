import requests
from config import TOGETHER_API_KEY, TOGETHER_API_URL
from together import Together
from LLM_roel import system
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import json
import logging

# 設定日誌
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TravelChatbot:
    def __init__(self, model="meta-llama/Llama-4-Scout-17B-16E-Instruct", max_history=10):
        self.client = Together(api_key=TOGETHER_API_KEY)
        self.model = model
        self.max_history = max_history
        self.messages = [{"role": "system", "content": system}]

    def chat(self, user_query):
        try:
            cached_response = self.get_cached_response(user_query)
            if cached_response:
                return cached_response
            self.messages.append({"role": "user", "content": user_query})
            chat_completion = self.client.chat.completions.create(
                messages=self.messages,
                model=self.model,
            )
            reply = chat_completion.choices[0].message.content
            self.messages.append({"role": "assistant", "content": reply})
            if len(self.messages) > self.max_history:
                self.messages = [self.messages[0]] + self.messages[-(self.max_history-1):]
            self.cache_response(user_query, reply)
            self.set_current_itinerary(user_query, reply)
            df = self.parse_response_to_df(reply)
            print("\n### 結構化推薦 ###")
            print(df)
            return reply
        except requests.exceptions.RequestException as e:
            logger.error(f"網路錯誤: {str(e)}")
            return "網路連線失敗，請檢查網路後重試。"
        except Exception as e:
            if "429" in str(e):
                logger.error("API 配額超限")
                return "API 請求過多，請稍後再試或檢查 Together AI 配額。"
            logger.error(f"API 呼叫失敗: {str(e)}")
            return "抱歉，系統發生錯誤，請稍後再試。"

    def parse_response_to_df(self, response):
        lines = response.split('\n')
        data = []
        current_place = {}
        for line in lines:
            line = line.strip()
            if line.startswith('- 名稱:'):
                if current_place:
                    data.append(current_place)
                current_place = {'名稱': line.replace('- 名稱:', '').strip()}
            elif line.startswith('- 描述:'):
                current_place['描述'] = line.replace('- 描述:', '').strip()
            elif line.startswith('- 適合親子的原因:'):
                current_place['適合親子的原因'] = line.replace('- 適合親子的原因:', '').strip()
            elif line.startswith('- 交通方式:'):
                current_place['交通方式'] = line.replace('- 交通方式:', '').strip()
        if current_place:
            data.append(current_place)
        df = pd.DataFrame(data)
        df.to_csv('taichung_attractions.csv', index=False, encoding='utf-8')
        return df

    def get_cached_response(self, user_query):
        cache_file = "response_cache.json"
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache = json.load(f)
            for entry in cache:
                if entry["query"] == user_query:
                    logger.info("從快取中取得回應")
                    return entry["response"]
        return None

    def cache_response(self, user_query, response):
        cache_file = "response_cache.json"
        cache = []
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache = json.load(f)
        cache.append({"query": user_query, "response": response})
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(cache, f, ensure_ascii=False, indent=2)

    def save_conversation(self, filename="conversation.json"):
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.messages, f, ensure_ascii=False, indent=2)

    def load_conversation(self, filename="conversation.json"):
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                self.messages = json.load(f)
            logger.info("對話歷史已載入")
        else:
            logger.warning("找不到對話歷史檔案，使用預設系統訊息")

    def set_current_itinerary(self, query, response):
        with open("current_itinerary.json", 'w', encoding='utf-8') as f:
            json.dump({"query": query, "response": response}, f, ensure_ascii=False, indent=2)

    def get_current_itinerary(self):
        if os.path.exists("current_itinerary.json"):
            with open("current_itinerary.json", 'r', encoding='utf-8') as f:
                return json.load(f)
        return None

    def reset_conversation(self):
        self.messages = [{"role": "system", "content": system}]
        logger.info("對話歷史已重置")

def main():
    print("🚀 親子旅遊推薦系統啟動！輸入 '退出' 以結束。")
    chatbot = TravelChatbot()
    while True:
        user_query = input("請輸入您的旅遊查詢（例如：台中親子景點）：").strip()
        if user_query.lower() in ['退出', 'exit', 'quit']:
            print("感謝使用旅遊推薦系統！")
            break
        if not user_query:
            print("輸入不能为空，請重新輸入！")
            continue
        response = chatbot.chat(user_query)
        print("\n### 推薦結果 ###")
        print(response)
        print("\n")
        chatbot.save_conversation()

if __name__ == "__main__":
    main()